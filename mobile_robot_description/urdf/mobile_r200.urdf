<?xml version="1.0" encoding="utf-8"?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from mobile_r200.urdf.xacro         | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<!--
    - Base      : kobumobile_robotki
    - 3d Sensor : r200
-->
<robot name="turtlebot">
  <!-- 
    These properties must be observed by any machine
    that wants to be defined as a turtlebot. Refer
    to the REP for more details.
    
    http://www.ros.org/reps/rep-0119.html
   -->
  <!-- 
    These properties must be observed by any machine
    that wants to be defined as a turtlebot. Refer
    to the REP for more details.
    
    http://www.ros.org/reps/rep-0119.html
   -->
  <link name="base_footprint"/>
  <!--
       Base link is set at the bottom of the base mould.
       This is done to be compatible with the way base link
       was configured for turtlebot 1. Refer to
       
       https://github.com/turtlebot/turtlebot/issues/40
       
       To put the base link at the more oft used wheel
       axis, set the z-distance from the base_footprint
       to 0.352.
      -->
  <joint name="base_joint" type="fixed">
    <!--
		  <origin xyz="0 0 0.0102" rpy="0 0 -${M_PI/2}" />
	  -->
    <origin rpy="0 0 1.570796327" xyz="0 0 0.0102"/>
    <parent link="base_footprint"/>
    <child link="base_link"/>
  </joint>
  <link name="base_link">
    <visual>
      <geometry>
        <!-- new mesh -->
        <mesh filename="package://mobile_robot_description/meshes/body/chasis.dae" scale="0.001 0.001 0.001"/>
      </geometry>
      <origin rpy="0 0 0" xyz="-0.07 -0.12 0"/>
    </visual>
    <collision>
      <geometry>
        <box size="0.14 0.23 0.05"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0.0 -0.02 0"/>
    </collision>
    <inertial>
      <!-- COM experimentally determined -->
      <origin xyz="-0.07 -0.12 0"/>
      <mass value="0.01"/>
      <!-- 2.4/2.6 kg for small/big battery pack -->
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>
  <!-- Wheel and caster wheel link  -->
  <!-- NOTE This may prevent gazebo from working with this model -->
  <joint name="right_wheel_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.06 0 0"/>
    <parent link="base_link"/>
    <child link="right_wheel_link"/>
    <axis xyz="1 0 0"/>
    <limit effort="100" velocity="100"/>
    <joint_properties damping="0.0" friction="0.0"/>
  </joint>
  <link name="right_wheel_link">
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.01"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
    <visual>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.0325"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.0325"/>
      </geometry>
    </collision>
  </link>
  <link name="left_wheel_link">
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.01"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
    <visual>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.0325"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.0325"/>
      </geometry>
    </collision>
  </link>
  <!-- Fixed because we never rotate it anyway, it is just for show -->
  <!-- NOTE This may prevent gazebo from working with this model -->
  <joint name="left_wheel_joint" type="continuous">
    <origin rpy="0 0 0" xyz="0.06 0 0"/>
    <parent link="base_link"/>
    <child link="left_wheel_link"/>
    <axis xyz="1 0 0"/>
  </joint>
  <!--   
    <joint name="caster_front_joint" type="fixed">
      <parent link="base_link"/>
      <child link="chefbot_caster_front_link"/>
      <origin xyz="0.115 0.0 0.007" rpy="${-M_PI/2} 0 0"/>
    </joint>


    <link name="chefbot_caster_front_link">
      <collision>
        <geometry>
          <cylinder length="0.0176" radius="0.017"/>
        </geometry>
        <origin rpy="0 0 0" xyz="0 0 0"/>
      </collision>      
      <inertial>
        <mass value="0.01" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                 iyy="0.001" iyz="0.0" 
                 izz="0.001" />
      </inertial>
    </link>
-->
  <joint name="robot_caster_back_joint" type="fixed">
    <parent link="base_link"/>
    <child link="robot_caster_back_link"/>
    <origin rpy="0 0 0" xyz="0 -0.1 0"/>
  </joint>
  <link name="robot_caster_back_link">
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.01"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 -0.01"/>
      <geometry>
        <cylinder length="0.045" radius="0.01"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 -0.01"/>
      <geometry>
        <cylinder length="0.045" radius="0.01"/>
      </geometry>
    </collision>
  </link>


  <!--
  <xacro:include filename="$(find mobile_robot_description)/urdf/r200.urdf.xacro"/>
  <xacro:sensor_r200    parent="base_link"/>
-->
  <gazebo reference="left_wheel_link">
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
  </gazebo>
  <gazebo reference="right_wheel_link">
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
  </gazebo>
  <!--
    <gazebo reference="caster_front_link">
      <mu1>0.0</mu1>
      <mu2>0.0</mu2>
      <kp>1000000.0</kp>
      <kd>100.0</kd>
      <minDepth>0.001</minDepth>
      <maxVel>1.0</maxVel>
    </gazebo>
-->
  <gazebo reference="robot_caster_front_link">
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
  </gazebo>
  <gazebo reference="base_link">
    <mu1>0.3</mu1>
    <mu2>0.3</mu2>
    <sensor name="bumpers" type="contact">
      <always_on>1</always_on>
      <update_rate>50.0</update_rate>
      <visualize>true</visualize>
      <contact>
        <collision>base_footprint_fixed_joint_lump__base_collision</collision>
      </contact>
    </sensor>
  </gazebo>
  <gazebo reference="cliff_sensor_left_link">
    <sensor name="cliff_sensor_left" type="ray">
      <always_on>true</always_on>
      <update_rate>50</update_rate>
      <visualize>true</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>50</samples>
            <resolution>1.0</resolution>
            <min_angle>-0.0436</min_angle>
            <!-- -2.5 degree -->
            <max_angle>0.0436</max_angle>
            <!-- 2.5 degree -->
          </horizontal>
          <!--            Can't use vertical rays until this bug is resolved: -->
          <!--            https://bitbucket.org/osrf/gazebo/issue/509/vertical-sensor-doesnt-works -->
          <!--               <vertical> -->
          <!--                 <samples>50</samples> -->
          <!--                 <resolution>1.0</resolution> -->
          <!--                 <min_angle>-0.0436</min_angle>  -2.5 degree -->
          <!--                 <max_angle>0.0436</max_angle> 2.5 degree -->
          <!--               </vertical> -->
        </scan>
        <range>
          <min>0.01</min>
          <max>0.15</max>
          <resolution>1.0</resolution>
        </range>
      </ray>
    </sensor>
  </gazebo>
  <gazebo reference="cliff_sensor_right_link">
    <sensor name="cliff_sensor_right" type="ray">
      <always_on>true</always_on>
      <update_rate>50</update_rate>
      <visualize>true</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>50</samples>
            <resolution>1.0</resolution>
            <min_angle>-0.0436</min_angle>
            <!-- -2.5 degree -->
            <max_angle>0.0436</max_angle>
            <!-- 2.5 degree -->
          </horizontal>
          <!--            Can't use vertical rays until this bug is resolved: -->
          <!--            https://bitbucket.org/osrf/gazebo/issue/509/vertical-sensor-doesnt-works -->
          <!--               <vertical> -->
          <!--                 <samples>50</samples> -->
          <!--                 <resolution>1.0</resolution> -->
          <!--                 <min_angle>-0.0436</min_angle>  -2.5 degree -->
          <!--                 <max_angle>0.0436</max_angle> 2.5 degree -->
          <!--               </vertical> -->
        </scan>
        <range>
          <min>0.01</min>
          <max>0.15</max>
          <resolution>1.0</resolution>
        </range>
      </ray>
    </sensor>
  </gazebo>
  <gazebo reference="cliff_sensor_front_link">
    <sensor name="cliff_sensor_front" type="ray">
      <always_on>true</always_on>
      <update_rate>50</update_rate>
      <visualize>true</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>50</samples>
            <resolution>1.0</resolution>
            <min_angle>-0.0436</min_angle>
            <!-- -2.5 degree -->
            <max_angle>0.0436</max_angle>
            <!-- 2.5 degree -->
          </horizontal>
          <!--               Can't use vertical rays until this bug is resolved: -->
          <!--            https://bitbucket.org/osrf/gazebo/issue/509/vertical-sensor-doesnt-works -->
          <!--               <vertical> -->
          <!--                 <samples>50</samples> -->
          <!--                 <resolution>1.0</resolution> -->
          <!--                 <min_angle>-0.0436</min_angle>  -2.5 degree -->
          <!--                 <max_angle>0.0436</max_angle> 2.5 degree -->
          <!--               </vertical> -->
        </scan>
        <range>
          <min>0.01</min>
          <max>0.15</max>
          <resolution>1.0</resolution>
        </range>
      </ray>
    </sensor>
  </gazebo>
  <gazebo reference="gyro_link">
    <sensor name="imu" type="imu">
      <always_on>true</always_on>
      <update_rate>50</update_rate>
      <visualize>false</visualize>
      <imu>
        <noise>
          <type>gaussian</type>
          <rate>
            <mean>0.0</mean>
            <stddev>1.96e-06</stddev>
            <!-- 0.25 x 0.25 (deg/s) -->
            <bias_mean>0.0</bias_mean>
            <bias_stddev>0.0</bias_stddev>
          </rate>
          <accel>
            <!-- not used in the plugin and real robot, hence using tutorial values -->
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </accel>
        </noise>
      </imu>
    </sensor>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_ros_kobuki.so" name="kobuki_controller">
      <publish_tf>1</publish_tf>
      <left_wheel_joint_name>left_wheel_joint</left_wheel_joint_name>
      <right_wheel_joint_name>right_wheel_joint</right_wheel_joint_name>
      <wheel_separation>.130</wheel_separation>
      <wheel_diameter>0.0650</wheel_diameter>
      <torque>1.0</torque>
      <velocity_command_timeout>0.6</velocity_command_timeout>
      <cliff_sensor_left_name>cliff_sensor_left</cliff_sensor_left_name>
      <cliff_sensor_center_name>cliff_sensor_front</cliff_sensor_center_name>
      <cliff_sensor_right_name>cliff_sensor_right</cliff_sensor_right_name>
      <cliff_detection_threshold>0.04</cliff_detection_threshold>
      <bumper_name>bumpers</bumper_name>
      <imu_name>imu</imu_name>
    </plugin>
  </gazebo>
  <!--
    ==  Mount and camera body joints & links ==
    -->
  <!-- right bracket end 
    <joint name="bracket_end_right_joint" type="fixed">
      <origin xyz="${pole_px} ${pole_py} ${pole_pz}" rpy="0 0 -${M_PI_2}"/>
      <parent link="${parent}"/>
      <child link="bracket_end_right" />
    </joint>
    <link name="bracket_end_right">
    <visual>
       <origin xyz="${-r200_bracket_end_width/2} ${r200_bracket_end_offset_py} ${r200_bracket_end_offset_pz}" rpy="0 0 ${-M_PI/2}"/>
        <geometry>
         <mesh filename="package://mobile_robot_description/meshes/sensors/r200_bracket_end.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <xacro:insert_block name="material_dark_grey" />
      </visual>
    </link>-->
  <!-- center main bracket -->
  <joint name="bracket_joint" type="fixed">
    <!--<origin xyz="${r200_bracket_width/2+0.07} ${r200_bracket_offset_py} ${r200_bracket_offset_pz}" rpy="0 0 0"/>-->
    <origin rpy="0 0 -1.570796327" xyz="-0.09 -0.098 0.055"/>
    <parent link="base_link"/>
    <child link="bracket"/>
  </joint>
  <link name="bracket">
    <visual>
      <origin rpy="0 0 1.57079632679" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://mobile_robot_description/meshes/sensors/r200_camera_bracket.stl" scale="0.0001 0.0001 0.0001"/>
      </geometry>
      <material name="dark_grey">
        <color rgba="0.3 0.3 0.3 1"/>
      </material>
    </visual>
  </link>
  <!-- left bracket end 
    <joint name="bracket_end_left_joint" type="fixed">
      <origin xyz="${-r200_bracket_width/2} ${r200_bracket_length - r200_bracket_offset_py} ${-r200_bracket_offset_pz}" rpy="0 0 0"/>
      <parent link="bracket"/>
      <child link="bracket_end_left" />
    </joint>
    <link name="bracket_end_left">
    <visual>
       <origin xyz="${r200_bracket_end_width/2} 0 ${-r200_bracket_end_offset_pz}" rpy="0 0 ${M_PI/2}"/>
        <geometry>
         <mesh filename="package://mobile_robot_description/meshes/sensors/r200_bracket_end.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <xacro:insert_block name="material_dark_grey" />
      </visual>
    </link>
 -->
  <!-- camera body -->
  <joint name="camera_joint" type="fixed">
    <origin rpy="0 0 0" xyz="-0.017 0.024 0.005"/>
    <parent link="bracket"/>
    <child link="camera_link"/>
  </joint>
  <link name="camera_link">
    <visual>
      <origin rpy="1.57079632679 0 1.57079632679" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://mobile_robot_description/meshes/sensors/r200.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0.0 0.07 0.0"/>
      <geometry>
        <box size="0.05 0.14 0.05"/>
      </geometry>
    </collision>
    --&gt;
 
      
    <!-- This inertial field needs doesn't contain reliable data!! -->
    <inertial>
      <mass value="0.01"/>
      <origin xyz="-0.3 -0.15 0"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>
  <!--
    ==  RGB joints & links ==
    -->
  <joint name="camera_rgb_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.005 0.018 0.013"/>
    <parent link="camera_link"/>
    <child link="camera_rgb_frame"/>
  </joint>
  <link name="camera_rgb_frame"/>
  <joint name="camera_rgb_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="camera_rgb_frame"/>
    <child link="camera_rgb_optical_frame"/>
  </joint>
  <link name="camera_rgb_optical_frame"/>
  <!--
    ==  Depth joints & links ==
    -->
  <joint name="camera_depth_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0.01 0"/>
    <parent link="camera_rgb_frame"/>
    <child link="camera_depth_frame"/>
  </joint>
  <link name="camera_depth_frame"/>
  <joint name="camera_depth_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="camera_depth_frame"/>
    <child link="camera_depth_optical_frame"/>
  </joint>
  <link name="camera_depth_optical_frame"/>
  <gazebo reference="camera_link">
    <sensor name="camera" type="depth">
      <always_on>true</always_on>
      <update_rate>20.0</update_rate>
      <camera>
        <horizontal_fov>1.0471975512</horizontal_fov>
        <image>
          <format>B8G8R8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.05</near>
          <far>8.0</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="kinect_camera_controller">
        <cameraName>camera</cameraName>
        <alwaysOn>true</alwaysOn>
        <updateRate>10</updateRate>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <depthImageTopicName>depth/image_raw</depthImageTopicName>
        <pointCloudTopicName>depth/points</pointCloudTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
        <frameName>camera_depth_optical_frame</frameName>
        <baseline>0.1</baseline>
        <distortion_k1>0.0</distortion_k1>
        <distortion_k2>0.0</distortion_k2>
        <distortion_k3>0.0</distortion_k3>
        <distortion_t1>0.0</distortion_t1>
        <distortion_t2>0.0</distortion_t2>
        <pointCloudCutoff>0.4</pointCloudCutoff>
      </plugin>
    </sensor>
  </gazebo>
</robot>
